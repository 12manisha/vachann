defmodule Vachan.Repo.Migrations.MigrateResources3 do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    # alter table(:users) do
    # Attribute removal has been commented out to avoid data loss. See the migration generator documentation for more
    # If you uncomment this, be sure to also uncomment the corresponding attribute *addition* in the `down` migration
    # remove :tenant_id
    # end
    #
    create table(:teams, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
      add :role, :text, null: false, default: "member"
      add :created_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :updated_at, :utc_datetime_usec, null: false, default: fragment("now()")

      add :member_id,
          references(:users,
            column: :id,
            name: "teams_member_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          primary_key: true,
          null: false

      add :organization_id, :uuid, null: false, primary_key: true
    end

    alter table(:people) do
      add :organization_id, :uuid
    end

    drop_if_exists unique_index(:people, [:email], name: "people_unique_email_index")

    create table(:organizations, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
    end

    alter table(:teams) do
      modify :organization_id,
             references(:organizations,
               column: :id,
               name: "teams_organization_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    alter table(:people) do
      modify :organization_id,
             references(:organizations,
               column: :id,
               name: "people_organization_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    create unique_index(:people, [:organization_id, :email], name: "people_unique_email_index")

    alter table(:organizations) do
      add :name, :text, null: false
      add :created_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :updated_at, :utc_datetime_usec, null: false, default: fragment("now()")
    end

    drop_if_exists constraint(:messages, "messages_recepient_id_fkey")

    drop_if_exists constraint(:messages, "messages_campaign_id_fkey")

    alter table(:messages) do
      modify :campaign_id,
             references(:campaigns,
               column: :id,
               name: "messages_campaign_id_fkey",
               type: :bigint,
               prefix: "public"
             )
    end

    drop_if_exists constraint(:crm_people_lists, "crm_people_lists_list_id_fkey")

    drop_if_exists constraint(:crm_people_lists, "crm_people_lists_person_id_fkey")

    alter table(:crm_people_lists) do
      modify :person_id,
             references(:people,
               column: :id,
               name: "crm_people_lists_person_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    alter table(:crm_lists) do
      add :organization_id,
          references(:organizations,
            column: :id,
            name: "crm_lists_organization_id_fkey",
            type: :uuid,
            prefix: "public"
          )
    end

    drop_if_exists unique_index(:crm_lists, [:name], name: "crm_lists_unique_list_name_index")

    create unique_index(:crm_lists, [:organization_id, :name],
             name: "crm_lists_unique_list_name_index"
           )

    drop_if_exists constraint(:campaigns, "campaigns_list_id_fkey")

    alter table(:campaigns) do
      add :organization_id,
          references(:organizations,
            column: :id,
            name: "campaigns_organization_id_fkey",
            type: :uuid,
            prefix: "public"
          )

      modify :list_id,
             references(:crm_lists,
               column: :id,
               name: "campaigns_list_id_fkey",
               type: :bigint,
               prefix: "public"
             )
    end

    execute("ALTER TABLE campaigns alter CONSTRAINT campaigns_list_id_fkey NOT DEFERRABLE")

    execute(
      "ALTER TABLE crm_people_lists alter CONSTRAINT crm_people_lists_person_id_fkey NOT DEFERRABLE"
    )

    alter table(:crm_people_lists) do
      modify :list_id,
             references(:crm_lists,
               column: :id,
               name: "crm_people_lists_list_id_fkey",
               type: :bigint,
               prefix: "public"
             )
    end

    execute(
      "ALTER TABLE crm_people_lists alter CONSTRAINT crm_people_lists_list_id_fkey NOT DEFERRABLE"
    )

    execute("ALTER TABLE messages alter CONSTRAINT messages_campaign_id_fkey NOT DEFERRABLE")

    alter table(:messages) do
      modify :recepient_id,
             references(:people,
               column: :id,
               name: "messages_recepient_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    execute("ALTER TABLE messages alter CONSTRAINT messages_recepient_id_fkey NOT DEFERRABLE")
  end

  def down do
    drop_if_exists constraint(:messages, "messages_recepient_id_fkey")

    alter table(:messages) do
      modify :recepient_id,
             references(:people,
               column: :id,
               name: "messages_recepient_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    drop_if_exists constraint(:crm_people_lists, "crm_people_lists_list_id_fkey")

    alter table(:crm_people_lists) do
      modify :list_id,
             references(:crm_lists,
               column: :id,
               name: "crm_people_lists_list_id_fkey",
               type: :bigint,
               prefix: "public"
             )
    end

    drop_if_exists constraint(:campaigns, "campaigns_organization_id_fkey")

    drop_if_exists constraint(:campaigns, "campaigns_list_id_fkey")

    alter table(:campaigns) do
      modify :list_id,
             references(:crm_lists,
               column: :id,
               name: "campaigns_list_id_fkey",
               type: :bigint,
               prefix: "public"
             )

      remove :organization_id
    end

    drop_if_exists unique_index(:crm_lists, [:organization_id, :name],
                     name: "crm_lists_unique_list_name_index"
                   )

    drop_if_exists constraint(:crm_lists, "crm_lists_organization_id_fkey")

    create unique_index(:crm_lists, [:organization_id, :name],
             name: "crm_lists_unique_list_name_index"
           )

    alter table(:crm_lists) do
      remove :organization_id
    end

    drop_if_exists constraint(:crm_people_lists, "crm_people_lists_person_id_fkey")

    alter table(:crm_people_lists) do
      modify :person_id,
             references(:people,
               column: :id,
               name: "crm_people_lists_person_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    drop_if_exists constraint(:messages, "messages_campaign_id_fkey")

    alter table(:messages) do
      modify :campaign_id,
             references(:campaigns,
               column: :id,
               name: "messages_campaign_id_fkey",
               type: :bigint,
               prefix: "public"
             )
    end

    alter table(:organizations) do
      remove :updated_at
      remove :created_at
      remove :name
    end

    drop_if_exists unique_index(:people, [:organization_id, :email],
                     name: "people_unique_email_index"
                   )

    drop_if_exists constraint(:people, "people_organization_id_fkey")

    alter table(:people) do
      modify :organization_id, :uuid
    end

    drop_if_exists constraint(:teams, "teams_organization_id_fkey")

    alter table(:teams) do
      modify :organization_id, :uuid
    end

    drop table(:organizations)

    create unique_index(:people, [:organization_id, :email], name: "people_unique_email_index")

    alter table(:people) do
      remove :organization_id
    end

    drop_if_exists constraint(:teams, "teams_member_id_fkey")

    drop table(:teams)

    # alter table(:users) do
    # This is the `down` migration of the statement:
    #
    #     remove :tenant_id
    #
    #
    # add :tenant_id, references(:tenants, column: :id, name: "users_tenant_id_fkey", type: :uuid, prefix: "public")
    # end
    #
  end
end
